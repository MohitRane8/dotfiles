# Script originally taken from https://github.com/ericmurphyxyz/dotfiles/blob/master/.config/lf/lfrc

# Basic Settings
set hidden true
set ignorecase true
set icons true
set drawbox true
set borderfmt "\033[1;37m"
set previewer '~/.config/lf/preview.sh'

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# Function: archive_extract
# This function extracts archive files in the lf file manager.
# - If no files are selected, it extracts the file under the cursor in the same directory.
# - If one or more files are selected, it extracts all selected files in the current directory.
# - Displays a table with file names and sizes, along with the total size.
# - Prompts the user once to confirm extraction for all files.
cmd archive_extract ${{
    tput bold
    set -f

    # Determine files to extract
    if [ -z "$fs" ]; then
        # No files selected, extract the file under the cursor
        files="$fx"
    else
        # Files are selected, extract all selected files
        files="$fs"
    fi

    # Display file table
    total_size=0
    printf "\n%-5s | %-10s | %-40s\n" "No." "Size" "File Name"
    printf "%-5s | %-10s | %-40s\n" "-----" "----------" "----------------------------------------"

    i=1
    for file in $files; do
        size=$(du -h "$file" | cut -f1)                             # Get human-readable file size
        total_size=$((total_size + $(du -b "$file" | cut -f1)))     # Get total size in bytes
        printf "%-5s | %-10s | %-40s\n" "$i" "$size" "$file"
        i=$((i + 1))
    done

    # Print total size in human-readable format
    total_size_hr=$(numfmt --to=iec-i --suffix=B $total_size)
    printf "\nTotal Size: %s\n\n" "$total_size_hr"

    echo "Extract all files? [y/N] "
    read ans

    if [ "$ans" = "y" ]; then
        for file in $files; do
            case $file in
                *.zip)       unzip "$file"       ;;
                *.7z)        7z x "$file"        ;;
                *.tar)       tar xf "$file"      ;;
                *.tar.gz)    tar xzf "$file"     ;;
                *.tgz)       tar xzf "$file"     ;;
                *.tar.bz2)   tar xjf "$file"     ;;
                *.tbz2)      tar xjf "$file"     ;;
                *.tar.xz)    tar xf "$file"      ;;
                *.gz)        gunzip "$file"      ;;
                *.bz2)       bunzip2 "$file"     ;;
                *.rar)       unrar e "$file"     ;;
                *)           printf "Unsupported format: %s\n" "$file" ;;
            esac
        done
    else
        echo "Extraction canceled"
        echo
    fi
}}

# Function: archive_create
cmd archive_create ${{
    tput bold
    set -f

    # Determine files to archive
    if [ -z "$fs" ]; then
        # No files selected, archive the file under the cursor
        files="$fx"
    else
        # Files are selected, archive all selected files
        files="$fs"
    fi

    # Display file table
    total_size=0
    printf "\n%-5s | %-10s | %-40s\n" "No." "Size" "File Name"
    printf "%-5s | %-10s | %-40s\n" "-----" "----------" "----------------------------------------"

    i=1
    for file in $files; do
        size=$(du -h "$file" | cut -f1)                             # Get human-readable file size
        total_size=$((total_size + $(du -b "$file" | cut -f1)))     # Get total size in bytes
        printf "%-5s | %-10s | %-40s\n" "$i" "$size" "$file"
        i=$((i + 1))
    done

    # Print total size in human-readable format
    total_size_hr=$(numfmt --to=iec-i --suffix=B $total_size)
    printf "\nTotal Size: %s\n\n" "$total_size_hr"

    # Show supported formats
    echo "Supported formats:"
    echo "  zip       - .zip"
    echo "  7z        - .7z"
    echo "  tar       - .tar"
    echo "  tar.gz    - .tar.gz"
    echo "  tgz       - .tgz (same as tar.gz)"
    echo "  tar.bz2   - .tar.bz2"
    echo "  tbz2      - .tbz2 (same as tar.bz2)"
    echo "  tar.xz    - .tar.xz"
    echo "  gz        - .gz (single file only)"
    echo "  bz2       - .bz2 (single file only)"
    echo "  rar       - .rar"
    echo

    first_file=$(echo "$files" | head -n 1)
    default_name=$(basename "$first_file")
    default_name="${default_name%.*}"
    read -p "Enter archive name (default: $default_name): " archive_name
    archive_name="${archive_name:-$default_name}"

    read -p "Enter archive format [zip/tar/tar.gz/tar.bz2/tar.xz/tgz/tbz2/gz/bz2/7z/rar] (default: zip): " format
    format="${format:-zip}"

    # Build full archive file name
    case "$format" in
        zip)            archive_file="$archive_name.zip" ;;
        7z)             archive_file="$archive_name.7z" ;;
        tar)            archive_file="$archive_name.tar" ;;
        tar.gz|tgz)     archive_file="$archive_name.tar.gz" ;;
        tar.bz2|tbz2)   archive_file="$archive_name.tar.bz2" ;;
        tar.xz)         archive_file="$archive_name.tar.xz" ;;
        gz)             archive_file="$archive_name.gz" ;;
        bz2)            archive_file="$archive_name.bz2" ;;
        rar)            archive_file="$archive_name.rar" ;;
        *)              echo "Unsupported format."; exit 1 ;;
    esac

    echo
    echo "Creating archive: $archive_file"
    echo

    # Validate format-specific requirements
    case "$format" in
        gz|bz2)
            file_count=$(echo "$files" | wc -l)
            if [ "$file_count" -ne 1 ]; then
                echo "$format only supports single file compression."
                exit 1
            fi
            ;;
    esac

    # Create archive
    case "$format" in
        7z)
            7z a "$archive_file" $files ;;
        zip)
            zip -r "$archive_file" $files ;;
        tar)
            tar cf "$archive_file" $files ;;
        tar.gz|tgz)
            tar czf "$archive_file" $files ;;
        tar.bz2|tbz2)
            tar cjf "$archive_file" $files ;;
        tar.xz)
            tar cJf "$archive_file" $files ;;
        gz)
            gzip -c "$files" > "$archive_file" ;;
        bz2)
            bzip2 -c "$files" > "$archive_file" ;;
        rar)
            rar a "$archive_file" $files ;;
    esac

    echo "Archive created: $archive_file"
    echo
}}

# Trash all selected files/directories
cmd trasher ${{
     files=$(printf "$fx" | tr '\n' ';')
     while [ "$files" ]; do
        file=${files%%;*}

        # Move the file/directory to trash
        trash put "$(basename "$file")"

        if [ "$files" = "$file" ]; then
            files=''
        else
            files="${files#*;}"
        fi
     done
}}

# Open all selected files/directories in Windows
cmd open_in_windows ${{
    files=$(printf "$fx" | tr '\n' ';')
    while [ "$files" ]; do
        file=${files%%;*}

        # Open the file/directory in Windows
        if [ -n "$WSL_DISTRO_NAME" ]; then
            wslview "$file"
        fi

        if [ "$files" = "$file" ]; then
            files=''
        else
            files="${files#*;}"
        fi
    done
}}

# Jump to file/directory using fzf
cmd fzf_jump ${{
    res="$(find . | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

# Search in contents of file under current directory, and jump to the selected file
# TODO: show files with matching name first before file contents
cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

# Find file/directory with fuzzy matching
# TODO: update this to use $EDITOR
#cmd fzf $EDITOR $(find . -name "$1" | fzf)
#cmd fzf $nvim $(find . -name "$1" | fzf)

# Bulk renaming
# Taken from https://github.com/gokcehan/lf/issues/149#issuecomment-470960434
cmd bulk-rename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cat $index > $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -le $max ]; do
			a="$(cat $index | sed "${counter}q;d")"
			b="$(cat $index_edit | sed "${counter}q;d")"
			counter=$(($counter+1))
			
			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

# Pre-requisite: Beyond Compare 4
# Define a custom command to compare two selected files/folders
cmd compare ${{
    file_count=$(echo "$fx" | wc -l)
    if [ "$file_count" -ne 2 ]; then
        echo "Select exactly 2 files/folders to compare"
    else
        # Get the selected files
        file1=$(echo "$fx" | head -n 1)
        file2=$(echo "$fx" | tail -n 1)
        # Launch Beyond Compare with the selected files in the background
        /mnt/c/Program\ Files/Beyond\ Compare\ 4/BCompare.exe "$(wslpath -w "$file1")" "$(wslpath -w "$file2")" &
    fi
}}

# Copy selected files to Windows Clipboard
cmd copy_files_to_windows_clipboard ${{
    files=$(printf "$fx" | tr '\n' ' ')
    if [ -n "$files" ]; then
        paths=""
        for file in $files; do
            paths="$paths\"$(wslpath -w "$file")\","
        done
        # Remove trailing comma
        paths="${paths%,}"
        nohup powershell.exe -Command "Set-Clipboard -Path @($paths)" > /dev/null 2>&1 &
    fi
}}

# Copy parent directory path of the current item to Windows Clipboard
cmd copy_parent_dir_windows_path ${{
    if [ -n "$f" ]; then
        parent_dir=$(dirname "$f")
        wsl_parent_dir=$(wslpath -w "$parent_dir" | sed 's|\\\\wsl\.localhost|\\\\\\\\wsl$|')
        nohup sh -c "printf '%s' \"$wsl_parent_dir\" | clip.exe" > /dev/null 2>&1 &
    fi
}}

# Zoxide - Jump to the specified directory interactively
cmd zoxide_interactive_jump ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

# Zoxide - Hook into lf's cd command to add the current directory to zoxide
cmd on-cd &{{
    zoxide add "$PWD"
}}

# Bindings
map d
map n
map w
map f
map b

# Archives
map ae archive_extract
map ac archive_create

# Basic Functions
map . set hidden!
map D trasher
# map dr $trash restore
map p paste
map d cut
map y copy
map <enter> open
map R reload
map nf mkfile
map nd mkdir
map ff :fzf_jump
map fs :fzf_search
#map f push :fzf<space>
map zi :zoxide_interactive_jump
map wo open_in_windows
map wy copy_files_to_windows_clipboard
map wp copy_parent_dir_windows_path
map bc compare

# Bookmarks
map gm cd ~/dotfiles
map gn cd ~/dotfiles/nvim/.config/nvim

# Windows Bookmarks
map gi cd /mnt/c/Users/Mohit/Downloads
map go cd /mnt/c/Users/Mohit/Documents

