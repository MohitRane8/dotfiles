#!/bin/zsh

# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

### lf file manager ###
# Use lf to switch directories and bind it to ctrl-o
function lfcd() {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1 && trap - HUP INT QUIT TERM PWR EXIT' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' '^ulfcd\n'

### Windows File Explorer ###
# Command: wf directory_path
# - Opens windows file explorer at directory_path
# - Relative directory_path works
if [[ -n "$WSL_DISTRO_NAME" ]]; then
    function wf() {
        /mnt/c/Windows/explorer.exe $(wslpath -w "$1")
    }
fi

### tmux ###
# attaches to an existing session
# creates new session if not present already
# creates custom session with windows if project path var is passed as arg
# project path var to be mentioned at the end of zsh-aliases file
function tmux_smart_attach() {
    # ensure only 1 arg is passed
    if [ $# -ne 1 ]; then
        echo "Mandatory argument required: session_name" 1>&2
        return 1
    fi

    SESSION_NAME=$1

    PROJECT_PATH=${(P)SESSION_NAME}

    # check if tmux already has a session
    tmux has-session -t $SESSION_NAME 2> /dev/null

    # attach to session if it already exists
    if [ $? -eq 0 ]; then
        tmux attach-session -t $SESSION_NAME

    # create new session if project path is empty (incase $1 isn't a valid alias for path)
    elif [ -z "$PROJECT_PATH" ]; then
        tmux new-session -s $SESSION_NAME -n term

    # for valid projects, create custom sessions
    # common project sessions
    elif [[ $SESSION_NAME == "neovim" || $SESSION_NAME == "dotfiles" ]]; then
        # create new session with window 1 = git
        #
        # -d = detach (do not attach to the session/window being created)
        # -s = name of session being created
        # -n = name of window being created
        # -c = change working directory for the new window being created
        #
        # commands to be executed in the new window will be in single quotes at the end
        # command 'nvim;zsh' means execute nvim in the new window.
        # after nvim is quit, run zsh terminal in that same window.
        # having just 'nvim' will auto close the window after quitting nvim
        tmux new-session -d -s $SESSION_NAME -n git -c $PROJECT_PATH 'lazygit;zsh'

        # create window 2 = code
        if test -f $PROJECT_PATH/Session.vim; then
            tmux new-window -d -n code -c $PROJECT_PATH 'nvim -S Session.vim;zsh'
        else
            tmux new-window -d -n code -c $PROJECT_PATH 'nvim;zsh'
        fi

        # create window 3 = term
        tmux new-window -d -n term -c $PROJECT_PATH

        # attach to the 2nd (code) window of the project session
        tmux attach-session -d -t $SESSION_NAME:2

    # personal/work project sessions
    # elif [[ $SESSION_NAME == "project_path_var" ]]; then

    fi

    return 0
}

